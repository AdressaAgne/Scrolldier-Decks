<?php 

class ScrollController extends Database {

	public function autoGeneratedDeck($scroll, $realtedNumber) {
		$relativeScrolls = $this->getMostUsedScrolls($scroll);
		$deck = [];
		$deck[] = $scroll;
		$deck[] = $scroll;
		$deck[] = $scroll;
		
		$related = $this->getRelatedScrolls($scroll, intval($realtedNumber));
		foreach ($related[1] as $key => $value) {
			$deck[] = $value;
			$deck[] = $value;
			$deck[] = $value;
		}
		foreach ($relativeScrolls->scrolls as $key => $value) {
			if (!array_key_exists($key, $deck) && !in_array($key, $deck)) {
				if (count($deck) == 48) {
					$deck[] = $key;
					$deck[] = $key;
					
					return [$this->arrayToScrollsJson($deck, "Auto Generated Deck for ".$related[0], "Scrolldier"), $related[2], $related[0]];
				} else {
					$deck[] = $key;
					$deck[] = $key;
					$deck[] = $key;
				}
			}	
		}
	}
	
	public function arrayToScrollsJson(array $array, $name, $author) {
		 return json_encode($json = [
			"deck" => $name,
			"author" => $author,
			"types" => $array
		]);
	}
	
	public function getRelatedScrolls($id, $numOfRelared) {
		$related = [];
		$query = $this->_db->prepare("SELECT * FROM scrollsCard WHERE id = :id");
		$arr = array(
			'id' => $id
		);
		$this->arrayBinderInt($query, $arr);
		
		if ($query->execute()) {
			$scroll = $query->fetch(PDO::FETCH_ASSOC);
			$type = $scroll['kind'];
			$subtype = explode(",", $scroll['types']);
			
			
			$arr = [
				'type' => $type,
				'id' => $id
			];
			
			$prepare = "";
			if (count($subtype) > 0) {
				$prepare .="AND(";

				for ($i = 0; $i < count($subtype); $i++) {
					if ($i == 0) {
						$prepare .= "types LIKE :".strtolower($subtype[$i])."";
					} else {
						$prepare .= " OR types LIKE :".strtolower($subtype[$i]);
					}
					$arr[strtolower($subtype[$i])] = '%'.$subtype[$i].'%';
				}

				$prepare .=")";
			}
			
			
			$faction = " AND ".$this->getFactionForDB($scroll)." > 0";
			$queryString = "SELECT * FROM scrollsCard WHERE id != :id AND kind = :type ".$prepare.$faction." LIMIT ".intval($numOfRelared);
			$query = $this->_db->prepare($queryString);
			
			$this->arrayBinder($query, $arr);
			$relatedName = [];
			if ($query->execute()) {
				while ($scrolls = $query->fetch(PDO::FETCH_ASSOC)) {
					$related[] = $scrolls['id'];
					$relatedName[] = $scrolls['name']."(".$scrolls['id'].")";
				}
			}
			return [$scroll['name'], $related, $relatedName];
		}
	}
	
	public function getFactionForDB($query) {
		if (!empty($query['costgrowth'])) {
			return "costgrowth";
		}
		if (!empty($query['costorder'])) {
			return "costorder";
		}
		if (!empty($query['costdecay'])) {
			return "costdecay";
		}
		if (!empty($query['costenergy'])) {
			return "costenergy";
		}
	}
	
	public function getMostUsedScrolls($id) {
	
		$scroll = new MostUsedScrolls();
//		$query = $this->_db->prepare("SELECT json, id FROM decks WHERE json like %:id% ");
		$query = $this->_db->prepare("SELECT id, JSON FROM decks WHERE JSON LIKE '%\"id\":".$id.",%'");
//		$arr = array(
//		    'id' => $id
//		);
//		$this->arrayBinderInt($query, $arr);
		$query->execute();
		
		//{"msg":"success","data":{"scrolls":[{"id":135,"c":2},
		
		
		// Populate deck with scrolls
		$decks = $query->fetchAll();
		foreach ($decks as $deck_data) {
			$json = json_decode($deck_data['JSON'], TRUE);
			
			
			foreach ($json['data']['scrolls'] as $key => $value) {
				$scroll->scrolls[$value['id']] += $value['c'];
			}
		
			$scroll->total++;
		}
		
		unset($scroll->scrolls[$id]);
		arsort($scroll->scrolls);
		//$scroll->scrolls = array_keys($scroll->scrolls);
		$scroll->mostused = array_keys($scroll->scrolls, max($scroll->scrolls))[0];
		
		return $scroll;
	
	
	}
}

class MostUsedScrolls {
	
	public $mostused = 0;
	
	public $total = 0;
	
	public $scrolls = [];
	
	public $percentage = [];
	
}